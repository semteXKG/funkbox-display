/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: message.proto */

#ifndef PROTOBUF_C_message_2eproto__INCLUDED
#define PROTOBUF_C_message_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Event Event;
typedef struct _Command Command;
typedef struct _CarSensor CarSensor;
typedef struct _StintData StintData;
typedef struct _Lap Lap;
typedef struct _LapData LapData;
typedef struct _McuData McuData;


/* --- enums --- */

typedef enum _Severity {
  SEVERITY__POSITIVE = 1,
  SEVERITY__NORMAL = 2,
  SEVERITY__WARN = 3,
  SEVERITY__CRIT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SEVERITY)
} Severity;
typedef enum _EventType {
  EVENT_TYPE__EVT_NONE = 1,
  EVENT_TYPE__EVT_LAP = 2,
  EVENT_TYPE__EVT_TIME_REMAIN = 3,
  EVENT_TYPE__EVT_STATE_CHANGE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_TYPE)
} EventType;
typedef enum _CommandType {
  COMMAND_TYPE__COM_NONE = 1,
  COMMAND_TYPE__COM_PIT = 2,
  COMMAND_TYPE__COM_STINT_OVER = 3,
  COMMAND_TYPE__COM_TBD = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COMMAND_TYPE)
} CommandType;

/* --- messages --- */

struct  _Event
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int32_t id;
  protobuf_c_boolean has_type;
  EventType type;
  protobuf_c_boolean has_severity;
  Severity severity;
  protobuf_c_boolean has_created_at;
  int64_t created_at;
  protobuf_c_boolean has_displayed_since;
  int64_t displayed_since;
  char *text;
};
#define EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event__descriptor) \
    , 0, 0, 0, EVENT_TYPE__EVT_NONE, 0, SEVERITY__POSITIVE, 0, 0, 0, 0, NULL }


struct  _Command
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  CommandType type;
  protobuf_c_boolean has_created;
  int64_t created;
  protobuf_c_boolean has_handled;
  int64_t handled;
};
#define COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&command__descriptor) \
    , 0, COMMAND_TYPE__COM_NONE, 0, 0, 0, 0 }


struct  _CarSensor
{
  ProtobufCMessage base;
  protobuf_c_boolean has_temp;
  uint32_t temp;
  protobuf_c_boolean has_preassure;
  double preassure;
};
#define CAR_SENSOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&car_sensor__descriptor) \
    , 0, 0, 0, 0 }


struct  _StintData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_running;
  protobuf_c_boolean running;
  protobuf_c_boolean has_enabled;
  protobuf_c_boolean enabled;
  protobuf_c_boolean has_target;
  int64_t target;
  protobuf_c_boolean has_elapsed;
  int64_t elapsed;
};
#define STINT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stint_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Lap
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lap_no;
  int32_t lap_no;
  protobuf_c_boolean has_lap_time_ms;
  int64_t lap_time_ms;
};
#define LAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lap__descriptor) \
    , 0, 0, 0, 0 }


struct  _LapData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lap_no;
  int32_t lap_no;
  protobuf_c_boolean has_best_lap;
  uint32_t best_lap;
  protobuf_c_boolean has_current_lap;
  uint32_t current_lap;
  size_t n_laps;
  Lap **laps;
};
#define LAP_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lap_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0,NULL }


struct  _McuData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_network_time_adjustment;
  int64_t network_time_adjustment;
  CarSensor *water;
  CarSensor *oil;
  CarSensor *gas;
  StintData *stint;
  LapData *lap_data;
  size_t n_events;
  Event **events;
  size_t n_outgoing_commands;
  Command **outgoing_commands;
  protobuf_c_boolean has_outgoing_commands_last_idx;
  int64_t outgoing_commands_last_idx;
  size_t n_incoming_commands;
  Command **incoming_commands;
  protobuf_c_boolean has_incoming_commands_last_idx;
  int64_t incoming_commands_last_idx;
};
#define MCU_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mcu_data__descriptor) \
    , 0, 0, NULL, NULL, NULL, NULL, NULL, 0,NULL, 0,NULL, 0, 0, 0,NULL, 0, 0 }


/* Event methods */
void   event__init
                     (Event         *message);
size_t event__get_packed_size
                     (const Event   *message);
size_t event__pack
                     (const Event   *message,
                      uint8_t             *out);
size_t event__pack_to_buffer
                     (const Event   *message,
                      ProtobufCBuffer     *buffer);
Event *
       event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event__free_unpacked
                     (Event *message,
                      ProtobufCAllocator *allocator);
/* Command methods */
void   command__init
                     (Command         *message);
size_t command__get_packed_size
                     (const Command   *message);
size_t command__pack
                     (const Command   *message,
                      uint8_t             *out);
size_t command__pack_to_buffer
                     (const Command   *message,
                      ProtobufCBuffer     *buffer);
Command *
       command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   command__free_unpacked
                     (Command *message,
                      ProtobufCAllocator *allocator);
/* CarSensor methods */
void   car_sensor__init
                     (CarSensor         *message);
size_t car_sensor__get_packed_size
                     (const CarSensor   *message);
size_t car_sensor__pack
                     (const CarSensor   *message,
                      uint8_t             *out);
size_t car_sensor__pack_to_buffer
                     (const CarSensor   *message,
                      ProtobufCBuffer     *buffer);
CarSensor *
       car_sensor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   car_sensor__free_unpacked
                     (CarSensor *message,
                      ProtobufCAllocator *allocator);
/* StintData methods */
void   stint_data__init
                     (StintData         *message);
size_t stint_data__get_packed_size
                     (const StintData   *message);
size_t stint_data__pack
                     (const StintData   *message,
                      uint8_t             *out);
size_t stint_data__pack_to_buffer
                     (const StintData   *message,
                      ProtobufCBuffer     *buffer);
StintData *
       stint_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stint_data__free_unpacked
                     (StintData *message,
                      ProtobufCAllocator *allocator);
/* Lap methods */
void   lap__init
                     (Lap         *message);
size_t lap__get_packed_size
                     (const Lap   *message);
size_t lap__pack
                     (const Lap   *message,
                      uint8_t             *out);
size_t lap__pack_to_buffer
                     (const Lap   *message,
                      ProtobufCBuffer     *buffer);
Lap *
       lap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lap__free_unpacked
                     (Lap *message,
                      ProtobufCAllocator *allocator);
/* LapData methods */
void   lap_data__init
                     (LapData         *message);
size_t lap_data__get_packed_size
                     (const LapData   *message);
size_t lap_data__pack
                     (const LapData   *message,
                      uint8_t             *out);
size_t lap_data__pack_to_buffer
                     (const LapData   *message,
                      ProtobufCBuffer     *buffer);
LapData *
       lap_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lap_data__free_unpacked
                     (LapData *message,
                      ProtobufCAllocator *allocator);
/* McuData methods */
void   mcu_data__init
                     (McuData         *message);
size_t mcu_data__get_packed_size
                     (const McuData   *message);
size_t mcu_data__pack
                     (const McuData   *message,
                      uint8_t             *out);
size_t mcu_data__pack_to_buffer
                     (const McuData   *message,
                      ProtobufCBuffer     *buffer);
McuData *
       mcu_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mcu_data__free_unpacked
                     (McuData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Event_Closure)
                 (const Event *message,
                  void *closure_data);
typedef void (*Command_Closure)
                 (const Command *message,
                  void *closure_data);
typedef void (*CarSensor_Closure)
                 (const CarSensor *message,
                  void *closure_data);
typedef void (*StintData_Closure)
                 (const StintData *message,
                  void *closure_data);
typedef void (*Lap_Closure)
                 (const Lap *message,
                  void *closure_data);
typedef void (*LapData_Closure)
                 (const LapData *message,
                  void *closure_data);
typedef void (*McuData_Closure)
                 (const McuData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    severity__descriptor;
extern const ProtobufCEnumDescriptor    event_type__descriptor;
extern const ProtobufCEnumDescriptor    command_type__descriptor;
extern const ProtobufCMessageDescriptor event__descriptor;
extern const ProtobufCMessageDescriptor command__descriptor;
extern const ProtobufCMessageDescriptor car_sensor__descriptor;
extern const ProtobufCMessageDescriptor stint_data__descriptor;
extern const ProtobufCMessageDescriptor lap__descriptor;
extern const ProtobufCMessageDescriptor lap_data__descriptor;
extern const ProtobufCMessageDescriptor mcu_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_message_2eproto__INCLUDED */
